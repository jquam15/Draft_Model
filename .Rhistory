setwd("~/draft_model")
knitr::opts_chunk$set(echo = TRUE)
advanced_stats = dataBREFPlayerAdvanced
library(nbastatR)
library(tidyverse)
advanced_stats = dataBREFPlayerAdvanced
advanced_stats = dataBREFPlayerAdvanced
##get obpm and dbpm for every player that has data from 2012 to 2022 2003:2021
bref_players_stats(seasons = 2012, tables = "advanced", widen=TRUE, assign_to_environment = TRUE)
Sys.setenv(VROOM_CONNECTION_SIZE = 500072)
##get obpm and dbpm for every player that has data from 2012 to 2022 2003:2021
bref_players_stats(seasons = 2012, tables = "advanced", widen=TRUE, assign_to_environment = TRUE)
advanced_stats = dataBREFPlayerAdvanced
head(advanced_stats)
knitr::opts_chunk$set(echo = TRUE)
library(nbastatR)
library(tidyverse)
##get obpm and dbpm for every player that has data from 2012 to 2022
bref_players_stats(seasons = 2012:2022, tables = "advanced", widen=TRUE, assign_to_environment = TRUE)
Sys.setenv(VROOM_CONNECTION_SIZE = 500072)
##get obpm and dbpm for every player that has data from 2012 to 2022
bref_players_stats(seasons = 2012:2022, tables = "advanced", widen=TRUE, assign_to_environment = TRUE)
Sys.setenv(VROOM_CONNECTION_SIZE = 500072)
knitr::opts_chunk$set(echo = TRUE)
library(nbastatR)
library(tidyverse)
#increase connection size for function to run
Sys.setenv(VROOM_CONNECTION_SIZE = 500072)
##get obpm and dbpm for every player that has data from 2012 to 2022
bref_players_stats(seasons = 2012:2022, tables = "advanced", widen=TRUE, assign_to_environment = TRUE)
advanced_stats = dataBREFPlayerAdvanced
head(advanced_stats)
advanced_stats = advanced_stats %>%
#filter year since 2011 and minutes >= 750 and games >= 50 to remove small sample sizes
filter(yearSeason >= 2011 & minutes >= 750 & countGames >= 50) %>%
#select only the desired variables
select(yearSeason, namePlayer, slugPosition, ratioOBPM, ratioDBPM) %>%
#rename the columns
rename("Year" = "yearSeason", "Player" = "namePlayer", "Position" = "slugPosition", "OBPM" = "ratioOBPM", "DBPM" = "ratioDBPM")
#inspect the last 5 rows
tail(advanced_stats)
if(file.exists("professional_data.csv")) {
print("File already exists")
} else {
write.csv(advanced_stats, "professional_data.csv", row.names = FALSE)
print("File downloaded successfully!")
}
advanced_stats = dataBREFPlayerAdvanced
head(advanced_stats)
advanced_stats = advanced_stats %>%
#filter year since 2011 and minutes >= 750 and games >= 50 to remove small sample sizes
filter(yearSeason >= 2011 & minutes >= 750 & countGames >= 50) %>%
#select only the desired variables
select(yearSeason, namePlayer, slugPosition, ratioOBPM, ratioDBPM) %>%
#rename the columns
rename("Year" = "yearSeason", "Player" = "namePlayer", "Position" = "slugPosition", "OBPM" = "ratioOBPM", "DBPM" = "ratioDBPM")
#inspect the last 5 rows
tail(advanced_stats)
#inspect the last 5 rows
tail(advanced_stats)
#inspect the last 5 rows
head(advanced_stats)
#inspect the last 5 rows
tail(advanced_stats)
if(file.exists("professional_data.csv")) {
print("File already exists")
} else {
write.csv(advanced_stats, "professional_data.csv", row.names = FALSE)
print("File downloaded successfully!")
}
setwd("~/draft_model")
if(file.exists("professional_data.csv")) {
print("File already exists")
} else {
write.csv(advanced_stats, "professional_data.csv", row.names = FALSE)
print("File downloaded successfully!")
}
setwd("~/draft_model")
knitr::opts_chunk$set(echo = TRUE)
#load in the package
library(nbastatR)
library(tidyverse)
#get a dataframe of draft combine results from 2012 to 2022 (commented out since I don't need to run this again)
df = draft_combines(years=c(2003:2021))
#get a dataframe of draft combine results from 2012 to 2022 (commented out since I don't need to run this again)
df = draft_combines(years=c(2012:2022))
df = df %>%
#select only the columns I want, with the exception of Lane Agility I should be able to find the missing data for
#all the other variables if I need to (kept lane agility because I think its important)
select(yearCombine, namePlayer, slugPosition, heightWOShoesInches, weightLBS, wingspanInches,
reachStandingInches, timeLaneAgility, pctBodyFat) %>%
#rename the columns to more intuitive names
rename("Player"=namePlayer, "Position"=slugPosition, "Height"=heightWOShoesInches, "Weight"=weightLBS,
"Wingspan"=wingspanInches, "Standing Reach"=reachStandingInches, "Lane Agiity"=timeLaneAgility,
"Body Fat %"=pctBodyFat) %>%
#take the position listed first as the player's position
separate(Position, c("Position", NA))
df
#get a dataframe of draft combine results from 2012 to 2022 (commented out since I don't need to run this again)
df = draft_combines(years=c(2012:2022))
#get a dataframe of draft combine results from 2012 to 2022 (commented out since I don't need to run this again)
df = draft_combines(years=c(2012:2022))
knitr::opts_chunk$set(echo = TRUE)
#load in the package
library(nbastatR)
library(tidyverse)
#get a dataframe of draft combine results from 2012 to 2022 (commented out since I don't need to run this again)
df = draft_combines(years=c(2012:2022))
df
df = df %>%
#select only the columns I want, with the exception of Lane Agility I should be able to find the missing data for
#all the other variables if I need to (kept lane agility because I think its important)
select(yearCombine, namePlayer, slugPosition, heightWOShoesInches, weightLBS, wingspanInches,
reachStandingInches, timeLaneAgility, pctBodyFat) %>%
#rename the columns to more intuitive names
rename("Player"=namePlayer, "Position"=slugPosition, "Height"=heightWOShoesInches, "Weight"=weightLBS,
"Wingspan"=wingspanInches, "Standing Reach"=reachStandingInches, "Lane Agiity"=timeLaneAgility,
"Body Fat %"=pctBodyFat) %>%
#take the position listed first as the player's position
separate(Position, c("Position", NA))
df
if(file.exists("combine_stats.csv")) {
print("File already exists")
} else {
write.csv(df, "combine_stats.csv", row.names = FALSE)
print("File downloaded successfully!")
}
#get a dataframe of draft combine results from 2011 to 2022 (commented out since I don't need to run this again)
df = draft_combines(years=c(2011:2022))
View(df)
df = df %>%
#select only the columns I want, with the exception of Lane Agility I should be able to find the missing data for
#all the other variables if I need to (kept lane agility because I think its important)
select(yearCombine, namePlayer, slugPosition, heightWOShoesInches, weightLBS, wingspanInches,
reachStandingInches, timeLaneAgility, pctBodyFat) %>%
#rename the columns to more intuitive names
rename("Player"=namePlayer, "Position"=slugPosition, "Height"=heightWOShoesInches, "Weight"=weightLBS,
"Wingspan"=wingspanInches, "Standing Reach"=reachStandingInches, "Lane Agiity"=timeLaneAgility,
"Body Fat %"=pctBodyFat) %>%
#take the position listed first as the player's position
separate(Position, c("Position", NA))
df
if(file.exists("combine_stats.csv")) {
print("File already exists")
} else {
write.csv(df, "combine_stats.csv", row.names = FALSE)
print("File downloaded successfully!")
}
knitr::opts_chunk$set(echo = TRUE)
#load in the package
library(nbastatR)
library(tidyverse)
#get a dataframe of draft combine results from 2011 to 2022 (commented out since I don't need to run this again)
df = draft_combines(years=c(2011:2022))
df = df %>%
#select only the columns I want, with the exception of Lane Agility I should be able to find the missing data for
#all the other variables if I need to (kept lane agility because I think its important)
select(yearCombine, namePlayer, slugPosition, heightWOShoesInches, weightLBS, wingspanInches,
reachStandingInches, timeLaneAgility, pctBodyFat) %>%
#rename the columns to more intuitive names
rename("Player"=namePlayer, "Position"=slugPosition, "Height"=heightWOShoesInches, "Weight"=weightLBS,
"Wingspan"=wingspanInches, "Standing Reach"=reachStandingInches, "Lane Agiity"=timeLaneAgility,
"Body Fat %"=pctBodyFat) %>%
#take the position listed first as the player's position
separate(Position, c("Position", NA))
df
if(file.exists("combine_measurables.csv")) {
print("File already exists")
} else {
write.csv(df, "combine_measurables.csv", row.names = FALSE)
print("File downloaded successfully!")
}
knitr::opts_chunk$set(echo = TRUE)
library(nbastatR)
library(tidyverse)
#increase connection size for function to run
Sys.setenv(VROOM_CONNECTION_SIZE = 500072)
##get obpm and dbpm for every player that has data from 2012 to 2022
bref_players_stats(seasons = 2012:2022, tables = "advanced", widen=TRUE, assign_to_environment = TRUE)
advanced_stats = dataBREFPlayerAdvanced
head(advanced_stats)
advanced_stats = advanced_stats %>%
#filter year since 2011 to get desired seasons and minutes >= 700 to remove small sample sizes
filter(yearSeason >= 2011 & minutes >= 700) %>%
#select only the desired variables
select(yearSeason, namePlayer, slugPosition, ratioOBPM, ratioDBPM) %>%
#rename the columns
rename("Year" = "yearSeason", "Player" = "namePlayer", "Position" = "slugPosition", "OBPM" = "ratioOBPM", "DBPM" = "ratioDBPM")
#inspect the last 5 rows
tail(advanced_stats)
if(file.exists("professional_data.csv")) {
print("File already exists")
} else {
write.csv(advanced_stats, "professional_data.csv", row.names = FALSE)
print("File downloaded successfully!")
}
setwd("~/draft_model")
knitr::opts_chunk$set(echo = TRUE)
#load in the package
library(nbastatR)
library(tidyverse)
#get a dataframe of draft combine results from 2011 to 2022 (commented out since I don't need to run this again)
df = draft_combines(years=2023)
df
df = df %>%
#select only the columns I want, with the exception of Lane Agility I should be able to find the missing data for
#all the other variables if I need to (kept lane agility because I think its important)
select(yearCombine, namePlayer, slugPosition, heightWOShoesInches, weightLBS, wingspanInches,
reachStandingInches, timeLaneAgility, pctBodyFat) %>%
#rename the columns to more intuitive names
rename("Player"=namePlayer, "Position"=slugPosition, "Height"=heightWOShoesInches, "Weight"=weightLBS,
"Wingspan"=wingspanInches, "Standing Reach"=reachStandingInches, "Lane Agiity"=timeLaneAgility,
"Body Fat %"=pctBodyFat) %>%
#take the position listed first as the player's position
separate(Position, c("Position", NA))
df
if(file.exists("combine_measurables_2022.csv")) {
print("File already exists")
} else {
write.csv(df, "combine_measurables_2022.csv", row.names = FALSE)
print("File downloaded successfully!")
}
